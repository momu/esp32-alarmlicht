esphome:
  name: esp-alarmlicht
  on_boot: 
    then:
      # disable all LEDs and REL1 on boot
      - output.turn_off: testbutton_led
      - output.turn_off: alarmlicht_led
      - output.turn_off: wifi_connected_led
      - output.turn_off: relay_1 
 
http_request:
  useragent: esphome/esp-alarmlicht

esp32:
  board: esp32-evb
  framework:
    type: arduino

# global variables for enabling/disabling test alerts
# and alerts via API calls
globals:
  - id: global_send_divera_testalarm
    type: bool
    initial_value: 'true'
  - id: global_send_ntfy_testalarm
    type: bool
    initial_value: 'true'
  - id: global_send_divera_alarm
    type: bool
    initial_value: 'true'
  - id: global_send_ntfy_alarm
    type: bool
    initial_value: 'true'

substitutions:
  relay_on_time: 300ms

# Enable logging
logger:
  level: DEBUG
  # level: INFO

wifi:
  networks:
    - ssid: !secret first_wifi_ssid
      password: !secret first_wifi_password
    - ssid: !secret second_wifi_ssid
      password: !secret second_wifi_password


output:
  - platform: gpio
    id: testbutton_led
    pin: GPIO23
  - platform: gpio
    id: alarmlicht_led
    pin: GPIO21
  - platform: gpio
    id: wifi_connected_led
    pin: GPIO14
  - platform: gpio
    id: relay_1
    pin: GPIO32

# let wifi_connected_led flash every 3s
interval:
  - interval: 3s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - output.turn_on: wifi_connected_led
          - delay: 0.05s
          - output.turn_off: wifi_connected_led
        else:
          - output.turn_off: wifi_connected_led


binary_sensor:
# When the  BUT1 is pressed, on-but1-press.yaml is included
# for sending test alerts via HTTP requests and turning on a LED 
# and the relay
# on release, the LED will be switched off
  - platform: gpio
    pin: GPIO34
    name: "BUT1"
    filters:
      - invert:
    on_press: 
        !include 
          file: on-but1-press.yaml
          vars:  
            divera_type: "ðŸ¤·Testalarm (ðŸ”˜ am Alarmlicht)ðŸ¤·"
            ntfy_title: "ðŸ¤·Testalarm (ðŸ”˜ am ESP-Alarmlicht)ðŸ¤·"
            ntfy_priority: "default"
            ntfy_tags: "loudspeaker, construction"
            ntfy_body: "Es drÃ¼ckte jemand den Testbutton am ESP-Alarmlicht und erfreut uns mit dieser Nachricht."
    on_release: 
      then:
        - output.turn_off: testbutton_led
# When GPIO16 is pulled down (remote for switching on the light is used),
# the alarmlicht_led is turned on and REL1 is switched on for 
# activating the lights.
  - platform: gpio
    pin: GPIO16
    name: "Funklicht"
    filters:
      - invert:
    on_press:
      - logger.log: "Light switched on by remote control."
      - output.turn_on: alarmlicht_led
      - output.turn_on: relay_1
      - delay: ${relay_on_time}
      - output.turn_off: relay_1
    on_release: 
      then:
        - output.turn_off: alarmlicht_led
  - platform: gpio
# When the  GPIO18 is pulled down, on-message-receive.yaml is included
# for sending alerts via HTTP requests, turning on a LED 
# and the relay
# on release, the LED will be switched off
    pin: GPIO18
    name: "DME Relais"
    filters:
      - invert:
    on_press: 
        !include 
          file: on-message-receive.yaml
          vars:  
            divera_type: "ðŸš’ALARM!!!1elf (oder Einsatz)ðŸš’"
            ntfy_title: "ðŸš’ALARM!!!1elf (oder Einsatz)ðŸš’"
            ntfy_priority: "urgent"
            ntfy_tags: "loudspeaker, rotating_light"
            ntfy_body: "Der DME lÃ¶ste aus."
    on_release: 
      then:
        - output.turn_off: alarmlicht_led
