esphome:
  name: esp-alarmlicht
  on_boot: 
    then:
      # disable all LEDs and REL1 on boot
      - output.turn_off: testbutton_led
      - output.turn_off: alarmlicht_led
      - output.turn_off: wifi_connected_led
      - output.turn_off: relay_1 
 
http_request:
  useragent: esphome/esp-alarmlicht
  id: http_request_data
# set timeout to prevent restart due to watchdog timeout (https://github.com/esphome/issues/issues/2853#issuecomment-1366086914)
  timeout: 1s

esp32:
  board: esp32-evb
  framework:
    type: arduino

# global variables for enabling/disabling test alerts
# and alerts via API calls
globals:
  - id: global_send_divera_testalarm
    type: bool
    initial_value: 'true'
  - id: global_send_ntfy_testalarm
    type: bool
    initial_value: 'true'
  - id: global_send_divera_alarm
    type: bool
    initial_value: 'true'
  - id: global_send_ntfy_alarm
    type: bool
    initial_value: 'false'
# is set to true when a alert is received
# will be set to false when alert has been transmitted
# will be checked on wifi reconnect 
  - id: global_alert_pending
    type: bool
    initial_value: 'false'
  - id: global_alert_type_test
    type: bool
    initial_value: 'false'
# wether the pending alert is test or real alert
  - id: global_pending_alert_type_test
    type: bool
    initial_value: 'false'
# failed http request and retry handling
  - id: global_divera_http_request_failed
    type: bool
    initial_value: 'false'
  - id: global_divera_http_request_max_retries
    type: int
    initial_value: '5'
  - id: global_divera_http_request_count
    type: int
    initial_value: '0'
  # - id: global_divera_http_request_status_code
  #   type: int
  #   initial_value: '0'

substitutions:
  relay_on_time: 300ms
  divera_type_alert: "ðŸš’ALARM!!!1elf (oder Einsatz)ðŸš’"
  ntfy_title_alert: "ðŸš’ALARM!!!1elf (oder Einsatz)ðŸš’"
  ntfy_priority_alert: "urgent"
  ntfy_tags_alert: "loudspeaker, rotating_light"
  ntfy_body_alert: "Der DME lÃ¶ste aus."
  divera_type_test: "ðŸ¤·Testalarm (ðŸ”˜ am Alarmlicht)ðŸ¤·"
  ntfy_title_test: "ðŸ¤·Testalarm (ðŸ”˜ am ESP-Alarmlicht)ðŸ¤·"
  ntfy_priority_test: "default"
  ntfy_tags_test: "loudspeaker, construction"
  ntfy_body_test: "Es drÃ¼ckte jemand den Testbutton am ESP-Alarmlicht und erfreut uns mit dieser Nachricht."

# Enable logging
logger:
  level: DEBUG
  # level: INFO

wifi:
  networks:
    - ssid: !secret first_wifi_ssid
      password: !secret first_wifi_password
    - ssid: !secret second_wifi_ssid
      password: !secret second_wifi_password
  power_save_mode: none
  id: 'wifi_id'


output:
  - platform: gpio
    id: testbutton_led
    pin: GPIO23
  - platform: gpio
    id: alarmlicht_led
    pin: GPIO21
  - platform: gpio
    id: wifi_connected_led
    pin: GPIO14
  - platform: gpio
    id: relay_1
    pin: GPIO32

interval:
# let wifi_connected_led flash every 3s
  - interval: 3s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - output.turn_on: wifi_connected_led
          - delay: 0.05s
          - output.turn_off: wifi_connected_led
        else:
          - output.turn_off: wifi_connected_led
  # check if there are pending alerts every 10 s
  - interval: 10s
    then:
      if:
        condition:
          wifi.connected:
        then: 
          if:
            condition: 
              lambda: 'return id(global_alert_pending);'
            then:
              - logger.log: 
                  format: "Pending alert found."
                  level: INFO
              - if:
                  condition: 
                    lambda: 'return id(global_pending_alert_type_test);'
                  then:
                      - lambda: 'id(global_alert_type_test) = true;'
                      - <<: !include {file: send-alerts.yaml,
                        vars:
                          {
                            divera_type: '${divera_type_test}',
                            ntfy_title: '${ntfy_title_test}',
                            ntfy_priority: '${ntfy_priority_test}',
                            ntfy_tags: '${ntfy_tags_test}',
                            ntfy_body: '${ntfy_body_test}'
                          }
                        }
                  else: 
                      - lambda: 'id(global_alert_type_test) = false;'
                      - <<: !include {file: send-alerts.yaml,
                        vars:
                          {
                            divera_type: '${divera_type_alert}',
                            ntfy_title: '${ntfy_title_alert}',
                            ntfy_priority: '${ntfy_priority_alert}',
                            ntfy_tags: '${ntfy_tags_alert}',
                            ntfy_body: '${ntfy_body_alert}'
                          }
                      }
  - interval: 5s
    then:
      - while:
          condition:
            and:
              - wifi.connected
              - lambda: 'return id(global_divera_http_request_failed);'
          then: 
              - lambda: 'id(global_alert_type_test) = false;'
              - <<: !include {file: send-alerts.yaml,
                vars:
                  {
                    divera_type: '${divera_type_alert}',
                    ntfy_title: '${ntfy_title_alert}',
                    ntfy_priority: '${ntfy_priority_alert}',
                    ntfy_tags: '${ntfy_tags_alert}',
                    ntfy_body: '${ntfy_body_alert}'
                  }
              }
        
      

binary_sensor:
# When the  BUT1 is pressed, on-but1-press.yaml is included
# for sending test alerts via HTTP requests and turning on a LED 
# and the relay
# on release, the LED will be switched off
  - platform: gpio
    pin: GPIO34
    name: "BUT1"
    filters:
      - invert:
    on_press: 
        !include 
          file: on-but1-press.yaml
          vars:  
            divera_type: ${divera_type_test}
            ntfy_title: ${ntfy_title_test}
            ntfy_priority: ${ntfy_priority_test}
            ntfy_tags: ${ntfy_tags_test}
            ntfy_body: ${ntfy_body_test}
    on_release: 
      then:
        - output.turn_off: testbutton_led
# When GPIO16 is pulled down (remote for switching on the light is used),
# the alarmlicht_led is turned on and REL1 is switched on for 
# activating the lights.
  - platform: gpio
    pin: GPIO16
    name: "Funklicht"
    filters:
      - invert:
    on_press:
      - logger.log: 
          format: "Light switched on by remote control."
          level: INFO
      - output.turn_on: alarmlicht_led
      - output.turn_on: relay_1
      - delay: ${relay_on_time}
      - output.turn_off: relay_1
    on_release: 
      then:
        - output.turn_off: alarmlicht_led
  - platform: gpio
# When the  GPIO18 is pulled down, on-message-receive.yaml is included
# for sending alerts via HTTP requests, turning on a LED 
# and the relay
# on release, the LED will be switched off
    pin: GPIO18
    name: "DME Relais"
    filters:
      - invert:
    on_press: 
        !include 
          file: on-message-receive.yaml
          vars:
            divera_type: ${divera_type_alert}
            ntfy_title: ${ntfy_title_alert}
            ntfy_priority: ${ntfy_priority_alert}
            ntfy_tags: ${ntfy_tags_alert}
            ntfy_body: ${ntfy_body_alert}
    on_release: 
      then:
        - output.turn_off: alarmlicht_led
